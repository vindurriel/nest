// Generated by CoffeeScript 1.6.3
var cacheIt, click, color, draw, expand, getLinkName, getR, highlight, r, redraw, save, tick, update;

cacheIt = function(e) {
  r.ctrlPressed = e.ctrlKey;
  r.altPressed = e.altKey;
  r.shiftPressed = e.shiftKey;
  return true;
};

redraw = function() {
  r.scale = d3.event.scale;
  r.vis.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" + r.scale + ")");
  return d3.selectAll(".node text").style("font-size", (1 / r.scale) + "em");
};

draw = function(json) {
  var n;
  if (json.blacklist != null) {
    r.blacklist = json.blacklist;
  }
  r.nodes = json.nodes;
  r.links = json.links;
  r.root = json.nodes[0];
  r.theFocus = r.root;
  r.root.fixed = false;
  r.root.isHigh = true;
  r.force = d3.layout.force().on("tick", tick).charge(function(d) {
    if (d.type === "referData") {
      return -20;
    } else {
      return -200;
    }
  }).linkDistance(20).linkStrength(.1).size([r.w, r.h]).nodes(r.nodes).links(r.links);
  n = r.nodes.length;
  r.nodes.forEach(function(d, i) {
    if (d.id == null) {
      d.id = d.name;
    }
    d.x = i * r.w / n;
    return d.y = i * r.h / n;
  });
  return update();
};

getLinkName = function(source, target) {
  return "" + source.name + "->" + target.name;
};

update = function() {
  var i, j, n, nodeEnter, x, _i, _j, _k, _len, _ref, _ref1, _ref2, _results;
  r.link = r.link.data(r.links).classed("highlight", function(d) {
    return d.isHigh === true;
  });
  r.link.enter().insert("line", ".node").classed("link", true);
  r.link.exit().remove();
  r.node = r.vis.selectAll(".node").data(r.nodes, function(d) {
    return d.id;
  }).classed("highlight", function(d) {
    return d.isHigh === true;
  });
  nodeEnter = r.node.enter().append("g").attr("class", "node").on("click", click).classed("highlight", function(d) {
    return d.isHigh === true;
  }).attr("transform", function(d) {
    return "translate(" + d.x + "," + d.y + ")";
  }).call(r.force.drag);
  nodeEnter.append("circle").attr("cx", 0).attr("cy", 0).attr("r", getR).style("fill", color);
  nodeEnter.append("text").attr("class", "notclickable desc").text(function(d) {
    return d.name;
  });
  r.node.exit().remove();
  d3.selectAll(".node circle").attr("r", getR).style("fill", color);
  d3.selectAll(".node text").attr("dx", function(d) {
    return getR(d) + 5;
  }).classed("show", function(d) {
    return d === r.theFocus;
  }).attr("font-size", (1 / r.scale) + "em");
  d3.selectAll(".search-img").remove();
  d3.selectAll(".node circle").filter(function(d) {
    return d.isSearching;
  }).append("animate").attr("attributeName", 'cx').attr("begin", '0s').attr("dur", '0.1s').attr("from", '-5').attr("to", '5').attr("fill", 'remove').attr("repeatCount", 'indefinite').classed("search-img", true);
  r.force.start();
  r.matrix = [];
  r.degree = [];
  r.hNode = {};
  n = r.nodes.length;
  for (i = _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    r.hNode[r.nodes[i].id] = r.nodes[i];
    r.degree.push(0);
    r.matrix.push([]);
    for (j = _j = 0, _ref1 = n - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
      r.matrix[i].push(null);
    }
  }
  _ref2 = r.links;
  _results = [];
  for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
    x = _ref2[_k];
    r.degree[x.source.index] += 1;
    r.degree[x.target.index] += 1;
    _results.push(r.matrix[x.source.index][x.target.index] = x);
  }
  return _results;
};

getR = function(d) {
  if (d === r.theFocus) {
    return 15;
  }
  if (d.isHigh) {
    return 10;
  } else {
    return 5;
  }
};

tick = function() {
  r.link.attr("x1", function(d) {
    return d.source.x;
  }).attr("y1", function(d) {
    return d.source.y;
  }).attr("x2", function(d) {
    return d.target.x;
  }).attr("y2", function(d) {
    return d.target.y;
  });
  return r.node.attr("transform", function(d) {
    return "translate(" + d.x + "," + d.y + ")";
  });
};

color = function(d) {
  var i;
  i = r.colors.indexOf(d.type);
  if (i >= 0) {
    return r.palette(i + 1);
  }
  return r.palette(0);
};

click = function(d) {
  var i, j, link, n, url, _i, _ref;
  if (r.shiftPressed) {
    if (d === r.root) {
      alert("不能删除根节点");
      r.shiftPressed = false;
      return;
    }
    n = r.nodes.length;
    i = d.index;
    for (j = _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; j = 0 <= _ref ? ++_i : --_i) {
      link = r.matrix[i][j];
      if (link != null) {
        r.links.remove(link);
        if (r.degree[j] === 1) {
          r.nodes.remove(link.target);
        }
      }
      link = r.matrix[j][i];
      if (link != null) {
        r.links.remove(link);
        if (r.degree[j] === 1) {
          r.nodes.remove(link.target);
        }
      }
    }
    r.nodes.remove(d);
    r.blacklist.push(d.id);
  } else if (r.altPressed) {
    save().done(function() {
      return window.location.href = "/model/" + d.name;
    });
    return;
  } else if (r.ctrlPressed) {
    if (d.type === "referData") {
      window.open(d.url != null ? d.url : d.name);
      return;
    }
    if ((d.isSearching != null) && d.isSearching === true) {
      d.isSearching = false;
    } else {
      d.isSearching = true;
    }
    if (!d.isSearching) {
      return;
    }
    url = "/roaming/" + d.type + "s/" + d.id;
    d3.json(url, expand);
  } else {
    highlight(d);
    history.pushState({}, d.name, "/model/" + d.id);
  }
  return update();
};

expand = function(data) {
  var i, id, source, target, x, _i, _len, _ref;
  for (id in data) {
    source = r.hNode[id];
    if (source == null) {
      continue;
    }
    i = 0;
    _ref = data[id];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      if (x.id == null) {
        x.id = x.name;
      }
      if (r.blacklist.indexOf(x.id) >= 0) {
        continue;
      }
      if (x.type === "referData") {
        if (r.hNode[x.id] == null) {
          r.nodes.push(x);
          r.links.push({
            "source": source,
            "target": x
          });
        }
      } else {
        target = x;
        if (r.hNode[x.id] == null) {
          if (i === 5) {
            continue;
          }
          r.nodes.push(x);
          i += 1;
        } else {
          target = r.hNode[x.id];
        }
        if (r.matrix[source.index][target.index] == null) {
          r.links.push({
            "source": source,
            "target": target
          });
        }
      }
    }
    source.isSearching = false;
  }
  return update();
};

highlight = function(d) {
  var i, j, x, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2;
  _ref = r.links;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    x = _ref[_i];
    x.isHigh = false;
  }
  _ref1 = r.nodes;
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    x = _ref1[_j];
    x.isHigh = false;
  }
  d.isHigh = true;
  r.theFocus = d;
  i = d.index;
  for (j = _k = 0, _ref2 = r.nodes.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
    if (r.matrix[i][j] != null) {
      r.matrix[i][j].isHigh = true;
      r.nodes[j].isHigh = true;
    }
    if (r.matrix[j][i] != null) {
      r.matrix[j][i].isHigh = true;
      r.nodes[j].isHigh = true;
    }
  }
};

save = function() {
  var res, x, _i, _j, _len, _len1, _ref, _ref1;
  res = {
    "id": r.root.id,
    "name": r.root.name,
    "type": r.root.type,
    "nodes": [],
    "links": [],
    "blacklist": r.blacklist
  };
  _ref = r.nodes;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    x = _ref[_i];
    res.nodes.push({
      "id": x.id,
      "name": x.name,
      "value": x.value,
      "index": x.index,
      "type": x.type,
      "url": x.url
    });
  }
  _ref1 = r.links;
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    x = _ref1[_j];
    res.links.push({
      "name": x.name,
      "source": x.source.index,
      "target": x.target.index
    });
  }
  res = JSON.stringify(res);
  return $.ajax({
    "url": "/model/" + r.root.id,
    "type": "POST",
    "contentType": "json",
    "data": res
  });
};

r = typeof exports !== "undefined" && exports !== null ? exports : this;

r.hNode = {};

r.w = $(this).width();

r.h = $(this).height();

r.ctrlPressed = false;

r.altPressed = false;

r.shiftPressed = false;

r.blacklist = [];

Array.prototype.remove = function(b) {
  var a;
  a = this.indexOf(b);
  if (a >= 0) {
    this.splice(a, 1);
    return true;
  }
  return false;
};

r.scale = 1;

r.vis = d3.select("#container").append("svg:svg").attr("width", r.w).attr("height", r.h).attr("viewBox", "0 0 " + r.w + " " + r.h).attr("pointer-events", "all").attr("preserveAspectRatio", "XMidYMid").append("svg:g").call(d3.behavior.zoom().scaleExtent([0.5, 10]).on("zoom", redraw)).on("dblclick", null).append("svg:g");

r.link = r.vis.selectAll(".link");

r.node = r.vis.selectAll(".node");

$(document).ready(function() {
  var id;
  $(document).keydown(cacheIt);
  $(document).keyup(cacheIt);
  $("#btn_tip").click(function() {
    return $("#tip").slideToggle(200);
  });
  $("#btn_save").click(function() {
    return save().done(function() {
      return alert("保存完成");
    }).fail(function(d, e) {
      return alert(e);
    });
  });
  $("#btn_search").click(function() {
    var query, type;
    type = $("input[name='music_type']:checked").val();
    query = $("#q").val();
    if (parseInt(query) === NaN) {
      return;
    }
    return $.getJSON("/model/load/" + query, function(d) {
      if (!d || (d.error != null)) {
        return $.getJSON("/info/" + type + "s/" + query, function(d) {
          if (!d || (d.error != null)) {
            alert(d.error);
            return;
          }
          return draw(d);
        });
      } else {
        return draw(d);
      }
    });
  });
  id = document.title;
  return $.getJSON("/model/load/" + id, function(d) {
    if (!d || (d.error != null)) {
      return draw({
        "nodes": [
          {
            "name": id,
            "id": id,
            "type": "Baike"
          }
        ],
        "links": []
      });
    } else {
      return draw(d);
    }
  });
});

r.vis.append("svg:rect").attr("width", r.w).attr("height", r.h).attr("fill", "none");

r.palette = d3.scale.category20();

r.colors = ["baiduBaikeCrawler", "hudongBaikeCrawler", "referData", "song", "artist", "user", "album"];
